{"version":3,"sources":["components/spinner.tsx","components/ErrorIndicator.tsx","components/WeatherList.tsx","services/weather_services.ts","components/InputForm.tsx","components/App.tsx","components/ErrorBoundry.tsx","index.tsx"],"names":["Spinner","ErrorIndicator","ButtonStyle","styled","button","WeatherList","weather","settings","switchTempMod","className","city","name","onClick","e","list","map","item","idx","key","dt","WeatherListItem","main","temp","temp_max","temp_min","dt_txt","substring","WeatherListContainer","this","props","state","loading","error","console","log","dots","infinite","speed","slidesToShow","slidesToScroll","Component","weatherBalloon","cityName","axios","get","then","resp","data","catch","err","toJSON","FormStyle","form","InputStyle","input","InputForm","fetchWeather","useState","value","setValue","debouncedValue","useDebounce","useEffect","onSubmit","preventDefault","type","onChange","s","target","toUpperCase","slice","placeholder","Header","header","Logo","div","WeatherHeader","to","Wrapper","App","temperature","setState","clouds","all","grnd_level","humidity","pressure","sea_level","Math","round","temp_kf","sys","pod","wind","cod","ErrorBoundry","hasError","children","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8ac44c10.chunk.js","sourcesContent":["import React from 'react';\n\nconst Spinner = () => {\n    return <div>loading...</div>\n};\n\nexport default Spinner;","import React from \"react\";\n\nconst ErrorIndicator = () => {\n    return <div>Error!</div>\n};\n\nexport default ErrorIndicator;","import React, { Component } from 'react';\nimport Spinner from './spinner';\nimport ErrorIndicator from './ErrorIndicator';\n\nimport Slider from \"react-slick\";\nimport \"slick-carousel/slick/slick.css\";\nimport \"slick-carousel/slick/slick-theme.css\";\nimport styled from 'styled-components';\n\nconst ButtonStyle = styled.button`\n    margin: 10px 0;\n`;\n\ntype WeatherListContainerProps = {\n    state: {weather: {\n            city: {\n                name: string\n            },\n            list: ItemType[]\n        },\n        loading: boolean,\n        temperature: boolean,\n        error: boolean},\n    fetchWeather: Function,\n    switchTempMod: Function\n}\n\ntype WeatherListProps = {\n    weather: {\n        city: {\n            name: string\n        },\n        list: ItemType[]\n    },\n    settings: {\n        dots: boolean,\n        infinite: boolean,\n        speed: number,\n        slidesToShow: number,\n        slidesToScroll: number\n    },\n    switchTempMod: Function\n}\n\nexport interface ItemType {\n    clouds: {all: number}\n    dt: number\n    dt_txt: string\n    main: {\n        grnd_level: number,\n        humidity: number,\n        pressure: number,\n        sea_level: number,\n        temp: number,\n        temp_kf: number,\n        temp_max: number,\n        temp_min: number\n    }\n    sys: {pod: string}\n    weather: Array<[]>\n    wind: {\n        speed: number, deg: number\n    }\n}\n\ntype WeatcherListItemProps = {\n    item: {\n        clouds: {all: number}\n        dt: number\n        dt_txt: string\n        main: {\n            grnd_level: number,\n            humidity: number,\n            pressure: number,\n            sea_level: number,\n            temp: number,\n            temp_kf: number,\n            temp_max: number,\n            temp_min: number\n        }\n        sys: {pod: string}\n        weather: Array<[]>\n        wind: {\n            speed: number, deg: number\n        }\n    }\n}\n\nconst WeatherList = ({weather, settings, switchTempMod}: WeatherListProps) => {\n    return (\n        <div>\n            <h2 className=\"center-block text-center\">{weather.city.name}</h2>\n            <ButtonStyle className=\"btn btn-outline-secondary\" onClick={ e => switchTempMod()}>switchTempMod</ButtonStyle>\n            <Slider {...settings} className=\"weather-list row\">\n                {\n                    weather.list.map((item: ItemType, idx: number) => {\n                        if (idx % 8 === 0)\n                        {return (\n                            <div className=\"center-block\" key={item.dt}>\n                                <WeatherListItem\n                                    item={item}/>\n                            </div>\n\n                        )}\n                        return null\n                    })\n                }\n            </Slider>\n        </div>\n    );\n};\n\nconst WeatherListItem = ( {item}: WeatcherListItemProps) => {\n\n    const { main: { temp, temp_max, temp_min}, dt_txt} = item;\n\n    return (\n        <div className=\"book-list-item list-group\">\n            <ul className=\"list-group\">\n                <li className=\"list-group-item\">Temp: {temp} &deg;</li>\n                <li className=\"list-group-item\">Max. Temp: {temp_max} &deg;</li>\n                <li className=\"list-group-item\">Min. Temp: {temp_min} &deg;</li>\n                <li className=\"list-group-item\">Date: {dt_txt.substring(0,10)}</li>\n            </ul>\n        </div>\n    )\n};\n\nclass WeatherListContainer extends Component<WeatherListContainerProps> {\n\n    render() {\n\n        const settings = {\n            dots: true,\n            infinite: true,\n            speed: 500,\n            slidesToShow: 1,\n            slidesToScroll: 1\n        };\n\n        const { state:{weather, loading, error}, switchTempMod} = this.props;\n\n        if(!loading) {\n            return <Spinner/>;\n        }\n\n        if(error) {\n            return <ErrorIndicator />;\n        }\n        console.log(weather);\n        return <WeatherList weather={weather} settings={settings} switchTempMod={switchTempMod}/>\n    }\n}\n\nexport default WeatherListContainer;","import axios from 'axios'\n\nconst weatherBalloon = (cityName?: string): Promise<WeatherType> => {\n    return axios\n        .get(`https://cors-anywhere.herokuapp.com/api.openweathermap.org/data/2.5/forecast?q=${cityName}&appid=68c24b19a0f082eb5868d192ef1bc194&units=metric`)\n        .then((resp) => resp.data)\n        .catch((err) => err.toJSON());\n};\n\ntype WeatherType = {\n    city: object,\n    name: string,\n    list: Array<object>,\n    temp:number,\n    temp_max: number,\n    temp_min: number,\n    dt_txt: string\n}\n\nexport default weatherBalloon;","import React, {useState, useEffect} from 'react';\nimport styled from 'styled-components';\nimport { useDebounce } from 'use-lodash-debounce'\n\nconst FormStyle = styled.form`\n    margin-top: 10px;\n`;\n\nconst InputStyle = styled.input`\n    margin: 0 auto;\n    width: 76.4%;\n`;\n\nconst InputForm = ({fetchWeather}: InputFormProps) => {\n    const [value, setValue] = useState();\n    const debouncedValue = useDebounce(value, 2000);\n\n    useEffect(() => {\n        fetchWeather(value)\n    }, //eslint-disable-next-line react-hooks/exhaustive-deps\n        [fetchWeather,debouncedValue]);\n    const capitalize = (s: string) => {\n        return s && s[0].toUpperCase() + s.slice(1);\n    };\n    const onSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n       e.preventDefault();\n    };\n        return(\n            <FormStyle className=\"d-flex\"\n                  onSubmit={onSubmit}>\n                <InputStyle type=\"text\"\n                       onChange={e => setValue(capitalize(e.target.value))}\n                       placeholder=\"Enter the name of the city\"\n                       value={value || ''}/>\n            </FormStyle>\n        )\n};\n\ntype InputFormProps = {fetchWeather: Function}\n\nexport default InputForm;","import React, {Component} from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components';\nimport WeatherListContainer, {ItemType} from \"./WeatherList\";\nimport weatherBalloon from \"../services/weather_services\";\nimport InputForm from \"./InputForm\";\n\nconst Header = styled.header`\n    border-bottom: 1px solid #e5e5e5;\n    margin-bottom: 1rem;\n    display: flex;\n    justify-content: space-between;\n`;\n\nconst Logo = styled.div`\n    font-family: \"Playfair Display\", Georgia, serif;\n    font-size: 2.5rem;\n    padding-left: 1rem;\n    `;\n\nconst WeatherHeader = () => {\n    return (\n        <Header className=\"row\">\n            <Link to=\"/\">\n                <Logo className=\"text-dark\">Weather-ts</Logo>\n            </Link>\n        </Header>\n    );\n};\n\nconst Wrapper = styled.div`\n    max-width: 800px;\n    margin: auto;\n`;\n\ntype IState = {\n    weather: {\n        city: {\n            name: string\n        },\n        list: ItemType[]\n    },\n    loading: boolean,\n    temperature: boolean,\n    error: boolean\n}\n\nexport default class App extends Component {\n\n    state: IState = {\n        weather: {\n            city: {\n                name: ''\n            },\n            list: []\n        },\n        loading: false,\n        temperature: true,\n        error: false,\n    };\n\n    switchTempMod = (): void => {\n        if (this.state.temperature) {\n            this.setState({\n                ...this.state,\n                weather: {...this.state.weather,\n                        city: {...this.state.weather.city},\n                        list:\n                            this.state.weather.list.map((item, idx) => {\n                                    return{\n\n                                            clouds: {all: this.state.weather.list[idx].clouds.all},\n                                            dt: this.state.weather.list[idx].dt,\n                                            dt_txt: this.state.weather.list[idx].dt_txt,\n                                            main: {\n                                                grnd_level: this.state.weather.list[idx].main.grnd_level,\n                                                humidity: this.state.weather.list[idx].main.humidity,\n                                                pressure: this.state.weather.list[idx].main.pressure,\n                                                sea_level: this.state.weather.list[idx].main.sea_level,\n                                                temp: Math.round((this.state.weather.list[idx].main.temp* 9 / 5) + 32),\n                                                temp_kf: this.state.weather.list[idx].main.temp_kf,\n                                                temp_max: Math.round((this.state.weather.list[idx].main.temp_max* 9 / 5) + 32),\n                                                temp_min: Math.round((this.state.weather.list[idx].main.temp_min* 9 / 5) + 32)\n                                            },\n                                            sys: {pod: this.state.weather.list[idx].sys.pod},\n                                            weather: {...this.state.weather.list[idx].weather},\n                                            wind: {...this.state.weather.list[idx].wind}\n\n                                    }\n                            })\n\n                    },\n                temperature: false\n\n            })\n        } else {\n            this.setState({\n                ...this.state,\n                weather: {...this.state.weather,\n                    city: {...this.state.weather.city},\n                    list:\n                        this.state.weather.list.map((item, idx) => {\n                            return{\n\n                                clouds: {all: this.state.weather.list[idx].clouds.all},\n                                dt: this.state.weather.list[idx].dt,\n                                dt_txt: this.state.weather.list[idx].dt_txt,\n                                main: {\n                                    grnd_level: this.state.weather.list[idx].main.grnd_level,\n                                    humidity: this.state.weather.list[idx].main.humidity,\n                                    pressure: this.state.weather.list[idx].main.pressure,\n                                    sea_level: this.state.weather.list[idx].main.sea_level,\n                                    temp: Math.round((this.state.weather.list[idx].main.temp- 32) * 5 / 9),\n                                    temp_kf: this.state.weather.list[idx].main.temp_kf,\n                                    temp_max: Math.round((this.state.weather.list[idx].main.temp_max- 32) * 5 / 9),\n                                    temp_min: Math.round((this.state.weather.list[idx].main.temp_min- 32) * 5 / 9)\n                                },\n                                sys: {pod: this.state.weather.list[idx].sys.pod},\n                                weather: {...this.state.weather.list[idx].weather},\n                                wind: {...this.state.weather.list[idx].wind}\n\n                            }\n                        })\n\n                },\n                temperature: true\n\n            })\n        }\n    };\n\n    fetchWeather = (city: string): void =>  {\n        if(!city) {city = 'Sevastopol'}\n        this.setState({\n            loading: false\n        });\n        weatherBalloon(city)\n            .then((data) => this.setState({\n                weather: data,\n                loading: true\n            }))\n            .catch(() => this.setState({\n                loading: false,\n                error: true\n            }))\n            .catch((err) => console.log('ошибка', err.cod));\n    };\n\n    render() {\n        return (\n            <Wrapper>\n                <WeatherHeader/>\n                <InputForm fetchWeather={this.fetchWeather}/>\n                <WeatherListContainer state={this.state} fetchWeather={this.fetchWeather} switchTempMod={this.switchTempMod}/>\n            </Wrapper>\n        )\n    }\n}\n\n","import React, { Component } from 'react';\nimport ErrorIndicator from './ErrorIndicator'\n\nexport default class ErrorBoundry extends Component{\n\n    state = {\n        hasError: false\n    };\n\n    componentDidCatch() {\n        this.setState({\n            hasError: true\n        });\n    }\n\n    render() {\n        if (this.state.hasError) {\n            return <ErrorIndicator/>;\n        }\n\n        return this.props.children;\n    }\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport {BrowserRouter as Router} from 'react-router-dom';\nimport ErrorBoundry from './components/ErrorBoundry'\n\nReactDOM.render(\n    <ErrorBoundry>\n        <Router>\n            <App/>\n        </Router>\n    </ErrorBoundry>,\n    document.getElementById('root'));\n\n"],"sourceRoot":""}